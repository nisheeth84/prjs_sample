pipeline {
  agent {
    label 'docker-jdk11'
  }
  parameters {
    string(name: 'MESSAGE_THREAD', defaultValue: '')
    string(name: 'CI_REGISTRY_IMAGE_TAG_SUFFIX', defaultValue: '')
    booleanParam(name: 'CI_SONAR_IGNORE_ERROR', defaultValue: false)
  }
  environment {
    CI_REPOSITORY_NAME = sh(returnStdout: true, script: 'echo ${JOB_NAME} | cut -d "/" -f2').trim()
    CI_PROJECT_NAME = sh(returnStdout: true, script: 'echo ${JOB_NAME} | cut -d "/" -f2 | sed "s|esale-||g"').trim()
    MESSAGE_PREFIX = "[<${BUILD_URL}|${JOB_NAME} #${BUILD_NUMBER}>] "
    CI_COMMIT_SHORT_SHA = sh(returnStdout: true, script: 'git rev-parse --short HEAD').trim()
    CI_COMMIT_MESSAGE = sh(returnStdout: true, script: 'git log -2 --pretty=format:"%h - %an, %ar : %s"').trim()
    CI_COMMIT_MESSAGE_WITH_MENTION = sh(returnStdout: true, script: 'git log -2 --pretty=format:"%h - @%an, %ar : %s"').trim()
    MAVEN_OPTS = '-Dmaven.repo.local=/var/jenkins_home/.m2/repository -XX:+TieredCompilation -XX:TieredStopAtLevel=1'
    CI_SONAR_URL = 'https://sonar.luvina.net'
    CI_SONAR_TOKEN = credentials('luvina-sonar-token')
    CI_SONAR_PROJECT = "${CI_REPOSITORY_NAME}"
    CI_REGISTRY = 'registry.luvina.net'
    CI_REGISTRY_IMAGE = "${CI_REGISTRY}/esr/esale-docker-dev"
    CI_REGISTRY_LOGIN = credentials('jenkins-luvina-esr-dev')
    CI_REGISTRY_IMAGE_TAG = "${CI_PROJECT_NAME}__${CI_COMMIT_SHORT_SHA}${CI_REGISTRY_IMAGE_TAG_SUFFIX}"
    CI_REGISTRY_IMAGE_EXTRA_TAG = "${CI_PROJECT_NAME}__luvina-develop"
  }
  stages {
    stage('notify started') {
      steps {
        echo 'Build started: ' + env.CI_PROJECT_NAME
        notifyStarted('Build started \n' + env.CI_COMMIT_MESSAGE)
      }
    }

    stage('build java') {
      agent {
        docker {
          image 'amazoncorretto:11'
          label 'docker'
          args ''
        }
      }
      stages {
        stage('check java') {
          steps {
            sh "java -version"
          }
        }

        stage('clean') {
          steps {
            sh "chmod +x mvnw"
            sh "./mvnw clean"
          }
        }

        stage('backend tests') {
          steps {
            sh "./mvnw test"
          }
        }

        stage('quality analysis') {
          environment {
            _CI_SONAR_MESSAGE_PREFIX = "<${CI_SONAR_URL}/dashboard?id=${CI_SONAR_PROJECT}|Sonar Qube ${CI_SONAR_PROJECT}> "
          }
          steps {
            echo env.CI_SONAR_PROJECT
            sh "./mvnw sonar:sonar -Dsonar.login=${CI_SONAR_TOKEN} -Dsonar.host.url=${CI_SONAR_URL} -Dsonar.projectKey=${CI_SONAR_PROJECT} -Dsonar.projectName=${CI_SONAR_PROJECT}"
            sleep(5)
            script {
              def projectStatus = sh(returnStdout: true, script: 'curl -fsSL ${CI_SONAR_URL}/api/qualitygates/project_status?projectKey=${CI_SONAR_PROJECT} | cut -d \'"\' -f6').trim()
              echo projectStatus
              if (projectStatus == 'ERROR') {
                notify(env._CI_SONAR_MESSAGE_PREFIX + 'NOT PASS \n' + env.CI_COMMIT_MESSAGE_WITH_MENTION, '#FF0000')
                if (!env.CI_SONAR_IGNORE_ERROR) {
                  currentBuild.result = "FAILURE"
                  throw new Exception("Sonar Qube not pass")
                }
              }
            }
          }
        }

        stage('packaging') {
          steps {
            sh "./mvnw package -Ddev -DskipTests"
            // archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true
          }
        }
      }
    }

    stage('publish docker') {
      when {
        branch 'luvina-develop'
      }
      environment {
        _CI_DOCKER_FILE_PATH = "Dockerfile"
        _CI_DOCKER_CONTEXT_PATH = "."
      }
      steps {
        sh "docker login -u ${CI_REGISTRY_LOGIN_USR} -p ${CI_REGISTRY_LOGIN_PSW} ${CI_REGISTRY}"
        sh "docker build -t ${CI_REGISTRY_IMAGE}:${CI_REGISTRY_IMAGE_TAG} -t ${CI_REGISTRY_IMAGE}:${CI_REGISTRY_IMAGE_EXTRA_TAG} -f ${_CI_DOCKER_FILE_PATH} ${_CI_DOCKER_CONTEXT_PATH}"
        sh "docker push ${CI_REGISTRY_IMAGE}:${CI_REGISTRY_IMAGE_TAG}"
        sh "docker push ${CI_REGISTRY_IMAGE}:${CI_REGISTRY_IMAGE_EXTRA_TAG}"
      }
    }

    stage('deploy to develop') {
      when {
        branch 'luvina-develop'
      }
      environment {
        _K8S_JOB = 'esale-k8s-dev'
        _CI_DOCKER_IMAGE = "${CI_REGISTRY_IMAGE}:${CI_REGISTRY_IMAGE_TAG}"
      }
      steps {
        build job: env._K8S_JOB, parameters: [[$class: 'StringParameterValue', name: 'CI_DOCKER_IMAGE', value: env._CI_DOCKER_IMAGE], [$class: 'StringParameterValue', name: 'MESSAGE_PREFIX', value: env.MESSAGE_PREFIX], [$class: 'StringParameterValue', name: 'MESSAGE_THREAD', value: env.MESSAGE_THREAD]], wait: false
      }
    }
  }
  post {
    success {
      echo 'Build success'
      notify('Build success', '#00FF00')
    }
    failure {
      echo 'Build failed'
      notify('Build FAILED \n' + env.CI_COMMIT_MESSAGE_WITH_MENTION, '#FF0000')
    }
  }
}

// define funtions
void notifyStarted(String message = 'Build started') {
  def response = notify(message)
  def messageThread = getSlackThread(response)
  env.MESSAGE_THREAD = messageThread;
}

void notify(String message, String color = '#0000FF', boolean broadcast = true) {
  def attachments = java.net.URLEncoder.encode('[{"text": "' + env.MESSAGE_PREFIX + message + '", "color": "' + color + '"}]', "UTF-8")
  withCredentials([[$class: 'StringBinding', credentialsId: 'slack-token', variable: 'SLACK_TOKEN']]) {
    return sh(returnStdout: true, script: 'curl -X POST -d "attachments=' + attachments + '&reply_broadcast=' + broadcast + '&thread_ts=' + env.MESSAGE_THREAD + '&link_names=true&channel=esr-jenkins&token=$SLACK_TOKEN" https://slack.com/api/chat.postMessage').trim()
  }
}

void getSlackThread(String response = '') {
  def matches = (response =~ /.+"ts"\:"([^"]+)".+/)
  return matches.matches() ? "" + matches.group(1) : ''
}